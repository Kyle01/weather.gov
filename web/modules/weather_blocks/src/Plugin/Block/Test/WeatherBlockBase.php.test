<?php

namespace Drupal\weather_blocks\Plugin\Block\Test;

use Drupal\Core\Form\FormStateInterface;
use Drupal\weather_blocks\Plugin\Block\CurrentConditionsBlock;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Tests for the WeatherBlockBaseTest block.
 */
final class WeatherBlockBaseTest extends Base
{
    /**
     * Common setup for all component tests.
     *
     * Creates a mock of a weather data service and injects it into a new current
     * conditions block object.
     */
    protected function setUp($type = null): void
    {
        // Instantiate a real object because the base class is abstract.
        parent::setUp(CurrentConditionsBlock::class);
    }

    /**
     * Test that the create() static method gives us back a block object.
     */
    public function testCreation(): void
    {
        $container = $this->createStub(ContainerInterface::class);
        $container->method("get")->will(
            $this->returnCallback(function () {
                $args = func_get_args();
                switch ($args[0]) {
                    case "weather_data":
                        return $this->weatherData;

                    case "current_route_match":
                        return $this->routeMock;

                    case "weather_entity":
                        return $this->entityService;

                    default:
                        return null;
                }
            }),
        );

        $actual = CurrentConditionsBlock::create($container, [], "", [
            "provider" => "weather_blocks",
        ]);
        $this->assertEquals(CurrentConditionsBlock::class, $actual::class);
    }

    /**
     * Test that block cacheing is disabled.
     */
    public function testCache(): void
    {
        $expected = 0;
        $actual = $this->block->getCacheMaxAge();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the block properly persists configuration changes.
     */
    public function testBlockSubmit(): void
    {
        $expected = "wfo,x,y";

        $formState = $this->createStub(FormStateInterface::class);
        $formState->method("getValue")->willReturn([
            "wfo" => "wfo",
            "gridX" => "x",
            "gridY" => "y",
        ]);

        $this->block->blockSubmit([], $formState);

        $actual = $this->block->getConfiguration()["grid"];

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the base block can get the relevant location from the URL.
     */
    public function testGetLocationFromRoute(): void
    {
        $this->routeMock
            ->method("getRouteName")
            ->willReturn("weather_routes.grid");
        // Also configure the block. This will ensure that we test that the location
        // only comes from the URL and not configuration.
        $this->block->setConfigurationValue("grid", "wrong,wrong,wrong");

        $this->routeMock
            ->method("getParameter")
            ->will(
                $this->returnValueMap([
                    ["wfo", "wfo code"],
                    ["gridX", "372"],
                    ["gridY", "004"],
                ]),
            );

        $expected = (object) [
            "grid" => (object) [
                "wfo" => "WFO CODE",
                "x" => 372,
                "y" => 4,
            ],
        ];

        $actual = $this->block->getLocation();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the base block gets location from configuration if not in URL.
     */
    public function testGetLocationFromConfiguration(): void
    {
        $this->routeMock->method("getRouteName")->willReturn("not grid");
        $this->block->setConfigurationValue("grid", "wiffo,ex,why");

        $expected = (object) [
            "grid" => (object) [
                "wfo" => "WIFFO",
                "x" => "ex",
                "y" => "why",
            ],
        ];

        $actual = $this->block->getLocation();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Tests that the location is empty if not on a grid route and not configured.
     */
    public function testGetsNoLocationWhenConfiguredFalse(): void
    {
        $this->routeMock->method("getRouteName")->willReturn("not grid");
        $this->block->setConfigurationValue("grid", false);

        $expected = (object) [
            "grid" => false,
        ];

        $actual = $this->block->getLocation();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Tests that the location is empty if not on a grid route and empty config.
     */
    public function testGetsNoLocationWhenConfiguredEmpty(): void
    {
        $this->routeMock->method("getRouteName")->willReturn("not grid");
        $this->block->setConfigurationValue("grid", ",,");

        $expected = (object) [
            "grid" => false,
        ];

        $actual = $this->block->getLocation();

        $this->assertEquals($expected, $actual);
    }
}
