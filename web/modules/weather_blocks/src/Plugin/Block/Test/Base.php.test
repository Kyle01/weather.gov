<?php

namespace Drupal\weather_blocks\Plugin\Block\Test;

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\weather_data\Service\WeatherDataService;
use Drupal\weather_data\Service\WeatherEntityService;
use PHPUnit\Framework\TestCase;
use Drupal\weather_blocks\Plugin\Block\WeatherBlockBase;
use Drupal\weather_blocks\Plugin\Block\WeatherStoryBlock;

/**
 * Base setup for weather blocks tests.
 */
abstract class Base extends TestCase
{
    /**
     * A ready-to-use weather block object.
     *
     * @var block
     */
    protected $block;

    /**
     * A mock entity type manager.
     *
     * @var entityTypeManagerMock
     */
    protected $entityServie;

    /**
     * A mock of the route object.
     *
     * @var routeMock
     */
    protected $routeMock;

    /**
     * A mocked WeatherData service object.
     *
     * @var weatherData
     *
     * This is injected into the current conditions block object being tested with
     * dependency injection.
     */
    protected $weatherData;

    /**
     * Common setup for all component tests.
     */
    protected function setUp($type = null): void
    {
        parent::setUp();

        $definition = [
            "provider" => "weather_blocks",
        ];

        $this->weatherData = $this->createStub(WeatherDataService::class);
        $this->entityService = $this->createStub(WeatherEntityService::class);

        $this->routeMock = $this->createStub(RouteMatchInterface::class);

        $this->block = new $type(
            [],
            "",
            $definition,
            $this->routeMock,
            $this->weatherData,
            $this->entityService,
        );
    }

    protected function onGridRoute($wfo = "wfo", $x = "1", $y = "1")
    {
        $this->routeMock
            ->method("getRouteName")
            ->willReturn("weather_routes.grid");

        $this->routeMock
            ->method("getParameter")
            ->will(
                $this->returnValueMap([
                    ["wfo", $wfo],
                    ["gridX", $x],
                    ["gridY", $y],
                ]),
            );
    }
}
