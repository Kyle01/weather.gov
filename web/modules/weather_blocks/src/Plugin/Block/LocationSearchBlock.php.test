<?php

namespace Drupal\weather_blocks\Plugin\Block;

use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\weather_data\Service\WeatherDataService;
use PHPUnit\Framework\TestCase;

/**
 * Tests for the LocationSearch block.
 */
final class LocationSearchBlockTest extends TestCase
{
    /**
     * A ready-to-use location search block object.
     *
     * @var locationSearchBlock
     */
    protected $locationSearchBlock;

    /**
     * A mock entity type manager.
     *
     * @var entityTypeManagerMock
     */
    protected $entityTypeManagerMock;

    /**
     * A mock of the route object.
     *
     * @var routeMock
     */
    protected $routeMock;

    /**
     * A mocked WeatherData service object.
     *
     * @var weatherData
     *
     * This is injected into the current conditions block object being tested with
     * dependency injection.
     */
    protected $weatherData;

    /**
     * Common setup for all component tests.
     *
     * Creates a new location search block.
     */
    protected function setUp(): void
    {
        $definition = [
            "provider" => "weather_blocks",
        ];

        $this->weatherData = $this->createStub(WeatherDataService::class);

        $this->routeMock = $this->createStub(RouteMatchInterface::class);
        $this->routeMock
            ->method("getRouteName")
            ->willReturn("weather_routes.grid");

        $this->entityTypeManagerMock = $this->createStub(
            EntityTypeManagerInterface::class,
        );

        $this->locationSearchBlock = new LocationSearchBlock(
            [],
            "",
            $definition,
            $this->routeMock,
            $this->entityTypeManagerMock,
            $this->weatherData,
        );
    }

    /**
     * Test that the build method returns the expected results.
     */
    public function testBuild(): void
    {
        $this->weatherData->method("getPlaceFromGrid")->willReturn("hiya");

        $expected = [
            "place" => "hiya",
        ];

        $actual = $this->locationSearchBlock->build();

        $this->assertEquals((object) $expected, (object) $actual);
    }

    /**
     * Test that the build method returns NULL if there is no location.
     */
    public function testWithNoLocation(): void
    {
        $this->routeMock->method("getRouteName")->willReturn("not grid");

        $expected = [
            "place" => null,
        ];

        $actual = $this->locationSearchBlock->build();

        $this->assertEquals((object) $expected, (object) $actual);
    }
}
