<?php

namespace Drupal\weather_blocks\Plugin\Block;

include_once "CurrentConditionsBlock.php";

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\weather_data\Service\WeatherDataService;
use PHPUnit\Framework\TestCase;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Tests for the CurrentConditions block.
 */
final class CurrentConditionsBlockTest extends TestCase {
  /**
   * A ready-to-use current conditions block object.
   *
   * @var currentConditionsBlock
   */
  protected $currentConditionsBlock;

  /**
   * A mock of the route object.
   *
   * @var routeMock
   */
  protected $routeMock;

  /**
   * A mocked WeatherData service object.
   *
   * @var weatherData
   *
   * This is injected into the current conditions block object being tested with
   * dependency injection.
   */
  protected $weatherData;

  /**
   * Common setup for all component tests.
   *
   * Creates a mock of a weather data service and injects it into a new current
   * conditions block object.
   */
  protected function setUp() : void {
    $definition = [
      "provider" => "weather_blocks",
    ];

    $this->weatherData = $this->createStub(WeatherDataService::class);

    $this->routeMock = $this->createStub(RouteMatchInterface::class);
    $this->routeMock->method('getRouteName')->willReturn("weather_routes.grid");

    $this->currentConditionsBlock = new CurrentConditionsBlock([], '', $definition, $this->weatherData, $this->routeMock);

  }

  /**
   * Test that the create() static method gives us back a block object.
   */
  public function testCreation() : void {
    $container = $this->createStub(ContainerInterface::class);
    $container->method('get')->will($this->returnCallback(function () {
      $args = func_get_args();
      switch ($args[0]) {
        case 'weather_data':
          return $this->weatherData;

        case 'current_route_match':
          return $this->routeMock;

        default:
          return NULL;
      }
    }));

    $actual = CurrentConditionsBlock::create($container, [], '', ["provider" => "weather_blocks"]);
    $this->assertEquals(CurrentConditionsBlock::class, $actual::class);
  }

  /**
   * Test that block cacheing is disabled.
   */
  public function testCache() : void {
    $expected = 0;
    $actual = $this->currentConditionsBlock->getCacheMaxAge();

    $this->assertEquals($expected, $actual);
  }

  /**
   * Test that the block returns the expected data if we're on a grid route.
   */
  public function testBuild() : void {
    $this->weatherData->method('getCurrentConditions')->willReturn('this is weather data');

    $expected = [
      "#theme" => "weather_blocks_current_conditions",
      "#data" => "this is weather data",
    ];
    $actual = $this->currentConditionsBlock->build();

    $this->assertEquals($expected, $actual);
  }

  /**
   * Test that the block returns null if we're not on a grid route.
   */
  public function testBuildNotGridRoute(): void {
    $definition = [
      "provider" => "weather_blocks",
    ];

    $this->weatherData = $this->createStub(WeatherDataService::class);

    $this->routeMock = $this->createStub(RouteMatchInterface::class);
    $this->routeMock->method('getRouteName')->willReturn("weather_routes.not-grid");

    $this->currentConditionsBlock = new CurrentConditionsBlock([], '', $definition, $this->weatherData, $this->routeMock);

    $actual = $this->currentConditionsBlock->build();

    $this->assertEquals(NULL, $actual);
  }

}
