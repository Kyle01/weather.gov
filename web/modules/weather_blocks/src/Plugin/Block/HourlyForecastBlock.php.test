<?php

namespace Drupal\weather_blocks\Plugin\Block;

include_once "HourlyForecastBlock.php";


/**
 * Tests for the HourlyForecast block.
 */
final class HourlyForecastBlockTest extends BlockTest {
  /**
   * A ready-to-use hourly forecast block.
   *
   * @var hourlyForecastBlock
   */
  protected $hourlyForecastBlock;


  /**
   * Common setup for all component tests.
   *
   * Creates a mock of a weather data service and injects it into a new current
   * conditions block object.
   */
  protected function setUp() : void {
    $definition = [
      "provider" => "weather_blocks",
    ];

    $this->weatherData = $this->createStub(WeatherDataService::class);

    $this->routeMock = $this->createStub(RouteMatchInterface::class);
    $this->routeMock->method('getRouteName')->willReturn("weather_routes.grid");

    $this->hourlyForecastBlock = new HourlyForecastBlock([], '', $definition, $this->weatherData, $this->routeMock);

  }

  /**
   * Test that the create() static method gives us back a block object.
   */
  public function testCreation() : void {
    $container = $this->createStub(ContainerInterface::class);
    $container->method('get')->will($this->returnCallback(function () {
      $args = func_get_args();
      switch ($args[0]) {
        case 'weather_data':
          return $this->weatherData;

        case 'current_route_match':
          return $this->routeMock;

        default:
          return NULL;
      }
    }));

    $actual = HourlyForecastBlock::create($container, [], '', ["provider" => "weather_blocks"]);
    $this->assertEquals(HourlyForecastBlock::class, $actual::class);
  }

  /**
   * Test that block cacheing is disabled.
   */
  public function testCache() : void {
    $expected = 0;
    $actual = $this->hourlyForecastBlock->getCacheMaxAge();

    $this->assertEquals($expected, $actual);
  }

  /**
   * Test that the block returns the expected data if we're on a grid route.
   */
  public function testBuild() : void {
    $this->weatherData->method('getHourlyForecast')->willReturn('this is weather data');

    $expected = [
      "#theme" => "weather_blocks_hourly_forecast",
      "#data" => "this is weather data",
    ];
    $actual = $this->hourlyForecastBlock->build();

    $this->assertEquals($expected, $actual);
  }

  /**
   * Test that the block returns null if we're not on a grid route.
   */
  public function testBuildNotGridRoute(): void {
    $definition = [
      "provider" => "weather_blocks",
    ];

    $this->weatherData = $this->createStub(WeatherDataService::class);

    $this->routeMock = $this->createStub(RouteMatchInterface::class);
    $this->routeMock->method('getRouteName')->willReturn("weather_routes.not-grid");

    $this->hourlyForecastBlock = new HourlyForecastBlock([], '', $definition, $this->weatherData, $this->routeMock);

    $actual = $this->hourlyForecastBlock->build();

    $this->assertEquals(NULL, $actual);
  }

}
