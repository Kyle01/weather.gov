<?php

namespace Drupal\weather_data\Service\Test;

use Drupal\Core\StringTranslation\TranslationInterface;
use Drupal\weather_data\Service\WeatherDataService;
use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Middleware;
use PHPUnit\Framework\TestCase;

/**
 * Tests for the WeatherDataService getCurrentConditions method.
 */
abstract class Base extends TestCase {
  /**
   * History of HTTP calls made during a test.
   */
  protected $httpCallStack;

  /**
   * The mocked HTTP client.
   *
   * @var httpClientMock
   */
  protected $httpClientMock;

  /**
   * The WeatherDataService object under test.
   *
   * @var weatherDataService
   */
  protected $weatherDataService;

  /**
   * Common setup for all component tests.
   */
  protected function setUp() : void {
    parent::setUp();

    $this->httpCallStack = [];
    $history = Middleware::history($this->httpCallStack);

    $this->httpClientMock = new MockHandler([]);
    $stack = HandlerStack::create($this->httpClientMock);
    $stack->push($history);
    $client = new Client(['handler' => $stack]);

    // Just return the input string. The translation manager is tested by Drupal
    // so we don't need to.
    $translationManager = $this->createStub(TranslationInterface::class);
    $translationManager->method('translate')->will(
      $this->returnCallback(
        function ($str) {
          return $str;
        }
      )
    );

    $this->weatherDataService = new WeatherDataService($client, $translationManager);
  }

}
