<?php

namespace Drupal\weather_data\Service\Test;

use GuzzleHttp\Psr7\Response;

/**
 * Tests for WeatherAlertTrait.
 */
final class WeatherAlertTraitTest extends Base
{
    /**
     * The expected results of the happy path.
     *
     * @var expected
     */
    protected $expected;

    /**
     * {@inheritdoc}
     */
    protected function setUp(): void
    {
        parent::setUp();

        $this->expected = [
            (object) [
                "areaDesc" => "place 2",
                "event" => "Tsunami Warning",
                "geometry" => [],
                "description" =>
                    "There is a very big wave and lots of water.\n\nTsunamis are very dangerous.",
                "instruction" => false,
                "onset" => \DateTimeImmutable::createFromFormat(
                    \DateTimeInterface::ISO8601_EXPANDED,
                    "2023-10-01T14:32:19-06:00",
                    new \DateTimeZone("America/Denver"),
                ),
                "ends" => \DateTimeImmutable::createFromFormat(
                    \DateTimeInterface::ISO8601_EXPANDED,
                    "2023-10-01T16:32:19-06:00",
                    new \DateTimeZone("America/Denver"),
                ),
                "expires" => \DateTimeImmutable::createFromFormat(
                    \DateTimeInterface::ISO8601_EXPANDED,
                    "2023-10-01T18:32:19-06:00",
                    new \DateTimeZone("America/Denver"),
                ),
            ],
            (object) [
                "areaDesc" => false,
                "event" => "volcano warning",
                "description" =>
                    "* WHAT...Bad weather\n\n* WHERE...Places\n\n* FAKE...This goes away",
                "geometry" => [],
                "instruction" =>
                    "Duck! And coooover!\n\nJust duck! And cooooover!",
                "onset" => false,
                "ends" => false,
                "expires" => false,
            ],
            (object) [
                "areaDesc" => "place 1",
                "event" => "Wind advisory",
                "description" =>
                    "There is a warning for:\n\nPlaces listed\n\nYou should prepare.",
                "geometry" => [[-71.89, 43.64], [-71.91, 44.14]],
                "onset" => \DateTimeImmutable::createFromFormat(
                    \DateTimeInterface::ISO8601_EXPANDED,
                    "2023-10-01T14:32:19-06:00",
                    new \DateTimeZone("America/Denver"),
                ),
                "instruction" => false,
                "ends" => false,
                "expires" => false,
            ],
            (object) [
                "event" => "air quality alert",
                "description" => "earliest",
                "geometry" => [],
                "instruction" => false,
                "areaDesc" => false,
                "ends" => false,
                "expires" => false,
                "onset" => \DateTimeImmutable::createFromFormat(
                    \DateTimeInterface::ISO8601_EXPANDED,
                    "2024-01-09T12:00:00-06:00",
                    new \DateTimeZone("America/Denver"),
                ),
            ],
            (object) [
                "event" => "air quality alert",
                "description" => "middle 1",
                "geometry" => [],
                "instruction" => false,
                "areaDesc" => false,
                "ends" => false,
                "expires" => false,
                "onset" => \DateTimeImmutable::createFromFormat(
                    \DateTimeInterface::ISO8601_EXPANDED,
                    "2024-01-09T13:00:00-06:00",
                    new \DateTimeZone("America/Denver"),
                ),
            ],
            (object) [
                "event" => "air quality alert",
                "description" => "middle 2",
                "geometry" => [],
                "instruction" => false,
                "areaDesc" => false,
                "ends" => false,
                "expires" => false,
                "onset" => \DateTimeImmutable::createFromFormat(
                    \DateTimeInterface::ISO8601_EXPANDED,
                    "2024-01-09T13:00:00-06:00",
                    new \DateTimeZone("America/Denver"),
                ),
            ],
            (object) [
                "event" => "air quality alert",
                "description" => "latest",
                "geometry" => [],
                "instruction" => false,
                "areaDesc" => false,
                "ends" => false,
                "expires" => false,
                "onset" => \DateTimeImmutable::createFromFormat(
                    \DateTimeInterface::ISO8601_EXPANDED,
                    "2024-01-09T14:00:00-06:00",
                    new \DateTimeZone("America/Denver"),
                ),
            ],
        ];
    }

    /**
     * Test the getAlertsForLatLon method.
     */
    public function testGetAlertsForLatLon(): void
    {
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-Type" => "application/geo+json"],
                file_get_contents(__DIR__ . "/test_data/alerts.good.json"),
            ),
        );
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-Type" => "application/geo+json"],
                '{"properties":{"timeZone":"America/Denver"}}',
            ),
        );

        $actual = $this->weatherDataService->getAlertsForLatLon(20, 30);

        $this->assertEquals($this->expected, $actual);
    }

    /**
     * Test the getAlertsForGrid method.
     */
    public function testGetAlertsForGrid(): void
    {
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                '{"geometry":{"coordinates":[[[4,3],[5,9],[3,9]]]}}',
            ),
        );

        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-Type" => "application/geo+json"],
                file_get_contents(__DIR__ . "/test_data/alerts.good.json"),
            ),
        );

        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-Type" => "application/geo+json"],
                '{"properties":{"timeZone":"America/Denver"}}',
            ),
        );

        $actual = $this->weatherDataService->getAlertsForGrid("abc", 20, 30);

        $this->assertEquals($this->expected, $actual);

        $this->assertEquals(3, count($this->httpCallStack));
        $this->assertEquals(
            "/gridpoints/abc/20,30",
            $this->httpCallStack[0]["request"]->getUri()->getPath(),
        );
        $this->assertEquals(
            "/alerts/active",
            $this->httpCallStack[1]["request"]->getUri()->getPath(),
        );
        $this->assertEquals(
            "status=actual&point=3,4",
            $this->httpCallStack[1]["request"]->getUri()->getQuery(),
        );
    }
}
