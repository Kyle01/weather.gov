<?php

namespace Drupal\weather_data\Service\Test;

use Drupal\Core\Database\StatementInterface;

/**
 * Tests for WeatherAlertTrait.
 */
final class WeatherAlertTraitTest extends Base
{
    /**
     * The expected results of the happy path.
     *
     * @var expected
     */
    protected $expected;

    /**
     * Test the getAlertsForGrid method.
     */
    public function testGetAlertsForGrid(): void
    {
        $this->selfMock
            ->method("getGeometryFromGrid")
            ->willReturn([
                (object) ["lat" => 40, "lon" => -80],
                (object) ["lat" => 40, "lon" => -75],
                (object) ["lat" => 30, "lon" => -75],
                (object) ["lat" => 30, "lon" => -80],
                (object) ["lat" => 40, "lon" => -80],
            ]);

        $this->selfMock->method("getPlaceFromGrid")->willReturn(
            (object) [
                "countyFIPS" => "1954", // Brown v. Board of Education
                "state" => "Oregon",
                "timezone" => "America/New_York",
            ],
        );

        // Alert 1. Zone-based, does not impact us.
        $alert1ZoneNotMine = (object) [
            "geometry" => null,
            "properties" => (object) [
                "event" => "high surf advisory",
                "geocode" => (object) [
                    "SAME" => [
                        "1957", // Little Rock Nine integrate Central High School
                        "1960", // Woolworth's lunch counter sit-in
                    ],
                ],
            ],
        ];

        // Alert 2. Zone-based DOES impact us. Land hazard.
        $alert2ZoneMineLand = (object) [
            "geometry" => null,
            "properties" => (object) [
                "event" => "hydrologic advisory",
                "description" => "The weather was hopeful",
                "instruction" => "Do the right thing",
                "areaDesc" => "Here, there, and everywhere",
                "onset" => "2024-01-08T13:48:00-06:00",
                "ends" => "2024-01-10T13:48:00-06:00",
                "expires" => "2024-01-09T13:48:00-06:00",
                "geocode" => (object) [
                    "SAME" => [
                        "1954",
                        "1961", // Freedom Riders take a
                        // Greyhound bus from Washington DC
                        // to Jackson, MS, testing a court
                        // decision that barred segregation
                        // on interstate transportation.
                    ],
                ],
            ],
        ];

        // Alert 3. Zone-based, does impact us, marine hazard.
        $alert3ZoneMineMarine = (object) [
            "geometry" => null,
            "properties" => (object) [
                "event" => "storm watch",
                "description" => "* Choppy waters...There are waves everywhere",
                "areaDesc" => "Here, there, and everywhere",
                "onset" => "2024-01-08T13:48:00-06:00",
                "geocode" => (object) [
                    "SAME" => [
                        "1954",
                        "1961", // Freedom Riders take a
                        // Greyhound bus from Washington DC
                        // to Jackson, MS, testing a court
                        // decision that barred segregation
                        // on interstate transportation.
                    ],
                ],
            ],
        ];

        // Alert 4. Polygon-based, does not impact us.
        $alert4GeometryNotMine = (object) [
            "geometry" => (object) [
                "coordinates" => [[[0, 0], [10, 0], [10, 10], [0, 10], [0, 0]]],
            ],
            "properties" => (object) [
                "event" => "Wind Advisory",
                "description" => "* Choppy waters...There are waves everywhere",
                "areaDesc" => "Here, there, and everywhere",
                "onset" => "2024-01-08T13:48:00-06:00",
            ],
        ];

        // Alert 5. Polygon-based, does impact us.
        $alert5GeometryMine = (object) [
            "geometry" => (object) [
                "coordinates" => [
                    [[20, 20], [30, 20], [30, 30], [20, 30], [20, 20]],
                ],
            ],
            "properties" => (object) [
                "event" => "Severe Thunderstorm Watch",
                "description" =>
                    "* CHOPPY WATERS...There are waves everywhere\n\n* Lowercase Heading...Is not parsed.\n\n* OH NO...It's too bad.",
                "areaDesc" => "Here, there, and everywhere",
                "onset" => "2024-01-08T13:48:00-06:00",
            ],
        ];

        $statement4 = $this->createStub(StatementInterface::class);
        $statement4->method("fetch")->willReturn((object) ["yes" => 0]);

        $statement5 = $this->createStub(StatementInterface::class);
        $statement5->method("fetch")->willReturn((object) ["yes" => 1]);

        $this->databaseMock->method("query")->will(
            $this->returnValueMap([
                [
                    "SELECT ST_INTERSECTS(
                ST_POLYGONFROMTEXT(
                    'POLYGON((-80 40,-75 40,-75 30,-80 30,-80 40))'
                ),
                ST_POLYGONFROMTEXT(
                    'POLYGON((0 0,10 0,10 10,0 10,0 0))'
                )
            ) as yes",
                    [],
                    [],
                    $statement4,
                ],
                [
                    "SELECT ST_INTERSECTS(
                ST_POLYGONFROMTEXT(
                    'POLYGON((-80 40,-75 40,-75 30,-80 30,-80 40))'
                ),
                ST_POLYGONFROMTEXT(
                    'POLYGON((20 20,30 20,30 30,20 30,20 20))'
                )
            ) as yes",
                    [],
                    [],
                    $statement5,
                ],
            ]),
        );

        $this->selfMock->method("getFromWeatherAPI")->will(
            $this->returnValueMap([
                [
                    "/alerts/active?status=actual&area=Oregon",
                    1, // must include default args
                    75, // must include default args
                    (object) [
                        "features" => [
                            $alert1ZoneNotMine,
                            $alert2ZoneMineLand,
                            $alert3ZoneMineMarine,
                            $alert4GeometryNotMine,
                            $alert5GeometryMine,
                        ],
                    ],
                ],
            ]),
        );

        $expectedZone = clone $alert2ZoneMineLand->properties;
        $expectedZone->areaDesc = ["Here, there, and everywhere"];
        $expectedZone->description = [
            ["type" => "paragraph", "text" => "The weather was hopeful"],
        ];
        $expectedZone->onset = "Monday, 01/08, 2:48 PM EST";
        $expectedZone->ends = "Wednesday, 01/10, 2:48 PM EST";
        $expectedZone->expires = "Tuesday, 01/09, 2:48 PM EST";
        $expectedZone->geometry = [];

        $expectedPolygon = clone $alert5GeometryMine->properties;
        $expectedPolygon->description = [
            ["type" => "heading", "text" => "choppy waters"],
            ["type" => "paragraph", "text" => "There are waves everywhere"],
            [
                "type" => "paragraph",
                "text" => "* Lowercase Heading...Is not parsed.",
            ],
            ["type" => "heading", "text" => "oh no"],
            ["type" => "paragraph", "text" => "It's too bad."],
        ];
        $expectedPolygon->areaDesc = ["Here, there, and everywhere"];
        $expectedPolygon->onset = "Monday, 01/08, 2:48 PM EST";
        $expectedPolygon->ends = false;
        $expectedPolygon->expires = false;
        $expectedPolygon->instruction = false;
        $expectedPolygon->geometry = [
            [20, 20],
            [30, 20],
            [30, 30],
            [20, 30],
            [20, 20],
        ];

        // The polygon one is a higher-priority event (severe thunderstorm
        // watch) than the zone one (hydrologic advisory), so they should be
        // sorted.
        $expected = [$expectedPolygon, $expectedZone];

        $actual = $this->weatherDataService->getAlertsForGrid(
            "abc",
            20,
            30,
            $this->selfMock,
        );

        $this->assertEquals($expected, $actual);
    }

    public function testCacheing(): void
    {
        $this->cacheMock
            ->method("get")
            ->will(
                $this->returnValueMap([
                    [
                        "alerts abc/20/30",
                        false,
                        (object) ["data" => "Yay there is some data"],
                    ],
                ]),
            );
        $actual = $this->weatherDataService->getAlertsForGrid("abc", 20, 30);

        $this->assertEquals("Yay there is some data", $actual);
    }
}
