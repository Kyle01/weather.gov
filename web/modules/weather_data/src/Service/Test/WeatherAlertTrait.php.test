<?php

namespace Drupal\weather_data\Service\Test;

use Drupal\Core\Database\StatementInterface;

/**
 * Tests for WeatherAlertTrait.
 */
final class WeatherAlertTraitTest extends Base
{
    /**
     * The expected results of the happy path.
     *
     * @var expected
     */
    protected $expected;

    /**
     * Test the getAlertsForGrid method.
     */
    public function testGetAlertsForGrid(): void
    {
        $this->selfMock
            ->method("getGeometryFromGrid")
            ->willReturn([
                (object) ["lat" => 40, "lon" => -80],
                (object) ["lat" => 40, "lon" => -75],
                (object) ["lat" => 30, "lon" => -75],
                (object) ["lat" => 30, "lon" => -80],
                (object) ["lat" => 40, "lon" => -80],
            ]);

        $this->selfMock->method("getPlaceNear")->willReturn(
            (object) [
                "countyFIPS" => "1954", // Brown v. Board of Education
                "state" => "Oregon",
                "timezone" => "America/New_York",
            ],
        );

        // Forecast-zone-based, does not impact us.
        $alertZoneNotMine = (object) [
            "geometry" => null,
            "properties" => (object) [
                "event" => "extreme cold warning",
                "affectedZones" => ["ZONE200"],
            ],
        ];

        // Forecast-zone-based, does not impact us, but has the same county â€“
        // should be excluded
        $alertZoneNotMineSameCounty = (object) [
            "geometry" => null,
            "properties" => (object) [
                "event" => "typhoon warning",
                "geocode" => (object) [
                    "SAME" => ["1954"],
                ],
                "affectedZones" => ["ZONE200"],
            ],
        ];

        // Forecast-zone-based, does impact us.
        $alertZoneMine = (object) [
            "geometry" => null,
            "properties" => (object) [
                "event" => "red flag warning",
                "affectedZones" => ["ZONE100"],
                "description" => "Colorful flags",
                "instruction" => "Spin 'em around",
                "areaDesc" => "Whoosh, spinny flags!",
                "onset" => "2024-01-08T13:48:00-06:00",
                "ends" => "2024-01-10T13:48:00-06:00",
                "expires" => "2024-01-09T13:48:00-06:00",
            ],
        ];

        // Fire-zone based
        $alertFireZoneMine = (object) [
            "geometry" => null,
            "properties" => (object) [
                "event" => "ashfall advisory",
                "affectedZones" => ["FIRE ZONE"],
                "description" => "There was a fire somewhere",
                "instruction" => "Wear a mask",
                "areaDesc" => "Ashy",
                "onset" => "2024-01-08T13:48:00-06:00",
                "ends" => "2024-01-10T13:48:00-06:00",
                "expires" => "2024-01-09T13:48:00-06:00",
            ],
        ];

        // County-based, does not impact us.
        $alertCountyNotMine = (object) [
            "geometry" => null,
            "properties" => (object) [
                "event" => "high surf advisory",
                "geocode" => (object) [
                    "SAME" => [
                        "1957", // Little Rock Nine integrate Central High School
                        "1960", // Woolworth's lunch counter sit-in
                    ],
                ],
                "affectedZones" => [],
            ],
        ];

        // County-based DOES impact us. Land hazard.
        $alertCountyMineLand = (object) [
            "geometry" => null,
            "properties" => (object) [
                "event" => "hydrologic advisory",
                "description" => "The weather was hopeful",
                "instruction" => "Do the right thing",
                "areaDesc" => "Here, there, and everywhere",
                "onset" => "2024-01-08T13:48:00-06:00",
                "ends" => "2024-01-10T13:48:00-06:00",
                "expires" => "2024-01-09T13:48:00-06:00",
                "geocode" => (object) [
                    "SAME" => [
                        "1954",
                        "1961", // Freedom Riders take a
                        // Greyhound bus from Washington DC
                        // to Jackson, MS, testing a court
                        // decision that barred segregation
                        // on interstate transportation.
                    ],
                ],
                "affectedZones" => [],
            ],
        ];

        // County-based, does impact us, marine hazard.
        $alertCountyMineMarine = (object) [
            "geometry" => null,
            "properties" => (object) [
                "event" => "storm watch",
                "description" => "* Choppy waters...There are waves everywhere",
                "areaDesc" => "Here, there, and everywhere",
                "onset" => "2024-01-08T13:48:00-06:00",
                "geocode" => (object) [
                    "SAME" => [
                        "1954",
                        "1961", // Freedom Riders take a
                        // Greyhound bus from Washington DC
                        // to Jackson, MS, testing a court
                        // decision that barred segregation
                        // on interstate transportation.
                    ],
                ],
                "affectedZones" => [],
            ],
        ];

        // Polygon-based, does not impact us.
        $alertGeometryNotMine = (object) [
            "geometry" => (object) [
                "coordinates" => [[[0, 0], [10, 0], [10, 10], [0, 10], [0, 0]]],
            ],
            "properties" => (object) [
                "event" => "Wind Advisory",
                "description" => "* Choppy waters...There are waves everywhere",
                "areaDesc" => "Here, there, and everywhere",
                "onset" => "2024-01-08T13:48:00-06:00",
            ],
        ];

        // Polygon-based, does impact us.
        $alertGeometrMine = (object) [
            "geometry" => (object) [
                "coordinates" => [
                    [[20, 20], [30, 20], [30, 30], [20, 30], [20, 20]],
                ],
            ],
            "properties" => (object) [
                "event" => "Severe Thunderstorm Watch",
                "description" => "* CHOPPY WATERS...There are waves everywhere

* Lowercase Heading...Is not parsed.

* OH NO...It's too bad.",
                "areaDesc" => "Here, there, and everywhere",
                "onset" => "2024-01-08T13:48:00-06:00",
            ],
        ];

        // No polygon, counties, or zones.
        $alert6Nobody = (object) [
            "geometry" => null,
            "properties" => (object) [
                "event" => "high surf advisory",
                "geocode" => (object) [
                    "SAME" => [],
                ],
                "affectedZones" => [],
            ],
        ];

        $statementNoIntersection = $this->createStub(StatementInterface::class);
        $statementNoIntersection
            ->method("fetch")
            ->willReturn((object) ["yes" => 0]);

        $statementIntersection = $this->createStub(StatementInterface::class);
        $statementIntersection
            ->method("fetch")
            ->willReturn((object) ["yes" => 1]);

        $this->databaseMock->method("query")->will(
            $this->returnValueMap([
                [
                    "SELECT ST_INTERSECTS(
                    ST_POLYGONFROMTEXT(
                        'POLYGON((-80 40,-75 40,-75 30,-80 30,-80 40))'
                    ),
                    ST_POLYGONFROMTEXT(
                        'POLYGON((0 0,10 0,10 10,0 10,0 0))'
                    )
                ) as yes",
                    [],
                    [],
                    $statementNoIntersection,
                ],
                [
                    "SELECT ST_INTERSECTS(
                    ST_POLYGONFROMTEXT(
                        'POLYGON((-80 40,-75 40,-75 30,-80 30,-80 40))'
                    ),
                    ST_POLYGONFROMTEXT(
                        'POLYGON((20 20,30 20,30 30,20 30,20 20))'
                    )
                ) as yes",
                    [],
                    [],
                    $statementIntersection,
                ],
            ]),
        );

        $this->selfMock->method("getFromWeatherAPI")->will(
            $this->returnValueMap([
                [
                    "/points/40,-80",
                    1,
                    75,
                    (object) [
                        "properties" => (object) [
                            "forecastZone" => "ZONE100",
                            "fireWeatherZone" => "FIRE ZONE",
                        ],
                    ],
                ],
                [
                    "/alerts/active?status=actual&area=Oregon",
                    1, // must include default args
                    75, // must include default args
                    (object) [
                        "features" => [
                            $alertZoneNotMine,
                            $alertZoneNotMineSameCounty,
                            $alertZoneMine,
                            $alertFireZoneMine,
                            $alertCountyNotMine,
                            $alertCountyMineLand,
                            $alertCountyMineMarine,
                            $alertGeometryNotMine,
                            $alertGeometrMine,
                            $alert6Nobody,
                        ],
                    ],
                ],
            ]),
        );

        $expectedZone = clone $alertZoneMine->properties;
        $expectedZone->areaDesc = ["Whoosh, spinny flags!"];
        $expectedZone->description = [
            ["type" => "paragraph", "text" => "Colorful flags"],
        ];
        $expectedZone->onset = "Monday, 01/08, 2:48 PM EST";
        $expectedZone->ends = "Wednesday, 01/10, 2:48 PM EST";
        $expectedZone->expires = "Tuesday, 01/09, 2:48 PM EST";
        $expectedZone->geometry = [];

        $expectedFireZone = clone $alertFireZoneMine->properties;
        $expectedFireZone->areaDesc = ["Ashy"];
        $expectedFireZone->description = [
            ["type" => "paragraph", "text" => "There was a fire somewhere"],
        ];
        $expectedFireZone->onset = "Monday, 01/08, 2:48 PM EST";
        $expectedFireZone->ends = "Wednesday, 01/10, 2:48 PM EST";
        $expectedFireZone->expires = "Tuesday, 01/09, 2:48 PM EST";
        $expectedFireZone->geometry = [];

        $expectedCounty = clone $alertCountyMineLand->properties;
        $expectedCounty->areaDesc = ["Here, there, and everywhere"];
        $expectedCounty->description = [
            ["type" => "paragraph", "text" => "The weather was hopeful"],
        ];
        $expectedCounty->onset = "Monday, 01/08, 2:48 PM EST";
        $expectedCounty->ends = "Wednesday, 01/10, 2:48 PM EST";
        $expectedCounty->expires = "Tuesday, 01/09, 2:48 PM EST";
        $expectedCounty->geometry = [];

        $expectedPolygon = clone $alertGeometrMine->properties;
        $expectedPolygon->description = [
            ["type" => "heading", "text" => "choppy waters"],
            ["type" => "paragraph", "text" => "There are waves everywhere"],
            [
                "type" => "paragraph",
                "text" => "* Lowercase Heading...Is not parsed.",
            ],
            ["type" => "heading", "text" => "oh no"],
            ["type" => "paragraph", "text" => "It's too bad."],
        ];
        $expectedPolygon->areaDesc = ["Here, there, and everywhere"];
        $expectedPolygon->onset = "Monday, 01/08, 2:48 PM EST";
        $expectedPolygon->ends = false;
        $expectedPolygon->expires = false;
        $expectedPolygon->instruction = false;
        $expectedPolygon->geometry = [
            [20, 20],
            [30, 20],
            [30, 30],
            [20, 30],
            [20, 20],
        ];

        // The polygon one is a higher-priority event (severe thunderstorm
        // watch) than the zone one (red flag warning), than the county one
        // (hydrologic advisory) so they should be sorted.
        $expected = [
            $expectedPolygon,
            $expectedZone,
            $expectedCounty,
            $expectedFireZone,
        ];

        $actual = $this->weatherDataService->getAlerts(
            (object) ["wfo" => "abc", "x" => 20, "y" => 30],
            (object) ["lat" => 40, "lon" => -80],
            $this->selfMock,
        );

        $this->assertEquals($expected, $actual);
    }

    public function testCacheing(): void
    {
        $this->cacheMock
            ->method("get")
            ->will(
                $this->returnValueMap([
                    [
                        "alerts abc/20/30",
                        false,
                        (object) ["data" => "Yay there is some data"],
                    ],
                ]),
            );
        $actual = $this->weatherDataService->getAlerts(
            (object) ["wfo" => "abc", "x" => 20, "y" => 30],
            (object) ["lat" => 40, "lon" => -80],
        );

        $this->assertEquals("Yay there is some data", $actual);
    }
}
