<?php

namespace Drupal\weather_data\Service\Test;

use GuzzleHttp\Psr7\Response;

/**
 * Tests for WeatherAlertTrait.
 */
final class WeatherAlertTraitTest extends Base
{
    /**
     * The expected results of the happy path.
     *
     * @var expected
     */
    protected $expected;

    /**
     * {@inheritdoc}
     */
    protected function setUp(): void
    {
        parent::setUp();

        $this->expected = [
            (object) [
                "areaDesc" => ["place 2"],
                "event" => "Tsunami Warning",
                "geometry" => [],
                "description" => [
                    [
                        "type" => "paragraph",
                        "text" => "There is a very big wave and lots of water.",
                    ],
                    [
                        "type" => "paragraph",
                        "text" => "Tsunamis are very dangerous.",
                    ],
                ],

                "instruction" => false,
                "onset" => "Sunday, 10/01, 2:32 PM MDT",
                "ends" => "Sunday, 10/01, 4:32 PM MDT",
                "expires" => "Sunday, 10/01, 6:32 PM MDT",
            ],
            (object) [
                "areaDesc" => false,
                "event" => "volcano warning",
                "description" => [
                    [
                        "type" => "heading",
                        "text" => "what",
                    ],
                    [
                        "type" => "paragraph",
                        "text" => "Bad weather",
                    ],
                    [
                        "type" => "heading",
                        "text" => "where",
                    ],
                    [
                        "type" => "paragraph",
                        "text" => "Places",
                    ],
                    [
                        "type" => "heading",
                        "text" => "fake",
                    ],
                    [
                        "type" => "paragraph",
                        "text" => "This does not go away",
                    ],
                ],
                "geometry" => [],
                "instruction" =>
                    "Duck! And coooover!\n\nJust duck! And cooooover!",
                "onset" => false,
                "ends" => false,
                "expires" => false,
            ],
            (object) [
                "areaDesc" => ["place 1"],
                "event" => "Wind advisory",
                "description" => [
                    [
                        "type" => "paragraph",
                        "text" => "There is a warning for:",
                    ],
                    [
                        "type" => "paragraph",
                        "text" => "Places listed",
                    ],
                    [
                        "type" => "paragraph",
                        "text" => "You should prepare.",
                    ],
                ],
                "geometry" => [[-71.89, 43.64], [-71.91, 44.14]],
                "onset" => "Sunday, 10/01, 2:32 PM MDT",
                "instruction" => false,
                "ends" => false,
                "expires" => false,
            ],
            (object) [
                "event" => "air quality alert",
                "description" => [
                    [
                        "type" => "paragraph",
                        "text" => "earliest",
                    ],
                ],
                "geometry" => [],
                "instruction" => false,
                "areaDesc" => false,
                "ends" => false,
                "expires" => false,
                "onset" => "Tuesday, 01/09, 12:00 PM MST",
            ],
            (object) [
                "event" => "air quality alert",
                "description" => [
                    [
                        "type" => "paragraph",
                        "text" => "middle 1",
                    ],
                ],
                "geometry" => [],
                "instruction" => false,
                "areaDesc" => false,
                "ends" => false,
                "expires" => false,
                "onset" => "Tuesday, 01/09, 1:00 PM MST",
            ],
            (object) [
                "event" => "air quality alert",
                "description" => [
                    [
                        "type" => "paragraph",
                        "text" => "middle 2",
                    ],
                ],
                "geometry" => [],
                "instruction" => false,
                "areaDesc" => false,
                "ends" => false,
                "expires" => false,
                "onset" => "Tuesday, 01/09, 1:00 PM MST",
            ],
            (object) [
                "event" => "air quality alert",
                "description" => [
                    [
                        "type" => "paragraph",
                        "text" => "latest",
                    ],
                ],
                "geometry" => [],
                "instruction" => false,
                "areaDesc" => false,
                "ends" => false,
                "expires" => false,
                "onset" => "Tuesday, 01/09, 2:00 PM MST",
            ],
        ];
    }

    /**
     * Test the getAlertsForLatLon method.
     */
    public function testGetAlertsForLatLon(): void
    {
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-Type" => "application/geo+json"],
                file_get_contents(__DIR__ . "/test_data/alerts.good.json"),
            ),
        );
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-Type" => "application/geo+json"],
                '{"properties":{"timeZone":"America/Denver"}}',
            ),
        );

        $actual = $this->weatherDataService->getAlertsForLatLon(20, 30);

        $this->assertEquals($this->expected, $actual);
    }

    /**
     * Test the getAlertsForGrid method.
     */
    public function testGetAlertsForGrid(): void
    {
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                '{"geometry":{"coordinates":[[[4,3],[5,9],[3,9]]]}}',
            ),
        );

        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-Type" => "application/geo+json"],
                file_get_contents(__DIR__ . "/test_data/alerts.good.json"),
            ),
        );

        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-Type" => "application/geo+json"],
                '{"properties":{"timeZone":"America/Denver"}}',
            ),
        );

        $actual = $this->weatherDataService->getAlertsForGrid("abc", 20, 30);

        $this->assertEquals($this->expected, $actual);

        $this->assertEquals(3, count($this->httpCallStack), 2);

        // WFO should get capitalized
        $this->assertEquals(
            "/gridpoints/ABC/20,30",
            $this->httpCallStack[0]["request"]->getUri()->getPath(),
        );
        $this->assertEquals(
            "/alerts/active",
            $this->httpCallStack[1]["request"]->getUri()->getPath(),
        );
        $this->assertEquals(
            "status=actual&point=3,4",
            $this->httpCallStack[1]["request"]->getUri()->getQuery(),
        );
    }
}
