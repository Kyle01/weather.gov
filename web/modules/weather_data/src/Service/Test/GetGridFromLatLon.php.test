<?php

namespace Drupal\weather_data\Service\Test;

use Drupal\Core\StringTranslation\TranslationInterface;
use Drupal\weather_data\Service\WeatherDataService;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
use PHPUnit\Framework\ExpectationFailedException;
use PHPUnit\Framework\TestCase;

/**
 * Tests for the WeatherDataService getGridFromLatLon method.
 */
final class WeatherDataServiceGetGridFromLatLon extends Base
{
    /**
     * Tests the happy path.
     */
    public function testHappyPath(): void
    {
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                json_encode([
                    "properties" => [
                        "gridId" => "the wfo",
                        "gridX" => "an x",
                        "gridY" => "a y",
                        "relativeLocation" => [
                            "properties" => [
                                "city" => "place",
                                "state" => "placestate",
                            ],
                        ],
                    ],
                ]),
            ),
        );

        $matcher = $this->exactly(2);
        $this->cacheMock
            ->expects($matcher)
            ->method("set")
            ->willReturnCallback(function (string $key, $value) use ($matcher) {
                match ($matcher->getInvocationCount()) {
                    2 => $this->assertEquals(
                        $key,
                        "placename THE WFO/an x/a y",
                    ) &&
                        $this->assertEquals(
                            $value,
                            (object) [
                                "city" => "place",
                                "state" => "placestate",
                            ],
                        ),
                    default => true,
                };
            });

        $expected = (object) [
            "wfo" => "THE WFO",
            "x" => "an x",
            "y" => "a y",
        ];

        $actual = $this->weatherDataService->getGridFromLatLon(1, 2);

        $this->assertEquals($expected, $actual);
    }

    /**
     * Tests using the suggested place name when it can't be broken up.
     */
    public function testUsingSuggestedPlaceNameAsOneBlob(): void
    {
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                json_encode([
                    "properties" => [
                        "gridId" => "the wfo",
                        "gridX" => "an x",
                        "gridY" => "a y",
                        "relativeLocation" => [
                            "properties" => [
                                "city" => "place",
                                "state" => "placestate",
                            ],
                        ],
                    ],
                ]),
            ),
        );

        $this->requestMock->method("get")->willReturn("suggested place");

        $matcher = $this->exactly(2);
        $this->cacheMock
            ->expects($matcher)
            ->method("set")
            ->willReturnCallback(function (string $key, $value) use ($matcher) {
                match ($matcher->getInvocationCount()) {
                    2 => $this->assertEquals(
                        $key,
                        "placename THE WFO/an x/a y",
                    ) &&
                        $this->assertEquals(
                            $value,
                            (object) [
                                "city" => "suggested place",
                                "state" => null,
                            ],
                        ),
                    default => true,
                };
            });

        $expected = (object) [
            "wfo" => "THE WFO",
            "x" => "an x",
            "y" => "a y",
        ];

        $actual = $this->weatherDataService->getGridFromLatLon(1, 2);

        $this->assertEquals($expected, $actual);
    }

    /**
     * Tests using the suggested place name when it can be split up.
     */
    public function testUsingSuggestedPlaceNameAsCityState(): void
    {
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                json_encode([
                    "properties" => [
                        "gridId" => "the wfo",
                        "gridX" => "an x",
                        "gridY" => "a y",
                        "relativeLocation" => [
                            "properties" => [
                                "city" => "place",
                                "state" => "placestate",
                            ],
                        ],
                    ],
                ]),
            ),
        );

        $this->requestMock
            ->method("get")
            ->willReturn("suggested place, ST, USA");

        $matcher = $this->exactly(2);
        $this->cacheMock
            ->expects($matcher)
            ->method("set")
            ->willReturnCallback(function (string $key, $value) use ($matcher) {
                match ($matcher->getInvocationCount()) {
                    2 => $this->assertEquals(
                        $key,
                        "placename THE WFO/an x/a y",
                    ) &&
                        $this->assertEquals(
                            $value,
                            (object) [
                                "city" => "suggested place",
                                "state" => "ST",
                            ],
                        ),
                    default => true,
                };
            });
        $expected = (object) [
            "wfo" => "THE WFO",
            "x" => "an x",
            "y" => "a y",
        ];

        $actual = $this->weatherDataService->getGridFromLatLon(1, 2);

        $this->assertEquals($expected, $actual);
    }

    /**
     * Tests when we get a request error.
     */
    public function testErrorCondition(): void
    {
        $this->httpClientMock->append(
            new RequestException("", new Request("GET", "")),
        );

        $actual = $this->weatherDataService->getGridFromLatLon(1, 2);

        $this->assertEquals(null, $actual);
    }
}
