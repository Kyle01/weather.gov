<?php

namespace Drupal\weather_data\Service\Test;

use Drupal\Core\StringTranslation\TranslationInterface;
use Drupal\weather_data\Service\WeatherDataService;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
use PHPUnit\Framework\ExpectationFailedException;
use PHPUnit\Framework\TestCase;

/**
 * Tests for the WeatherDataService getGridFromLatLon method.
 */
final class WeatherDataServiceGetGridFromLatLon extends TestCase
{
    /**
     * The mocked HTTP client.
     *
     * @var httpClientMock
     */
    protected $httpClientMock;

    /**
     * The WeatherDataService object under test.
     *
     * @var weatherDataService
     */
    protected $weatherDataService;

    /**
     * Common setup for all component tests.
     */
    protected function setUp(): void
    {
        parent::setUp();

        $this->httpClientMock = new MockHandler([]);
        $stack = HandlerStack::create($this->httpClientMock);
        $client = new Client(["handler" => $stack]);

        $translationManager = $this->createStub(TranslationInterface::class);

        $this->weatherDataService = new WeatherDataService(
            $client,
            $translationManager,
        );
    }

    /**
     * Tests the happy path.
     */
    public function testHappyPath(): void
    {
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                json_encode([
                    "properties" => [
                        "gridId" => "the wfo",
                        "gridX" => "an x",
                        "gridY" => "a y",
                        "relativeLocation" => [
                            "properties" => [
                                "city" => "place",
                            ],
                        ],
                    ],
                ]),
            ),
        );

        $expected = [
            "wfo" => "the wfo",
            "gridX" => "an x",
            "gridY" => "a y",
        ];

        $actual = $this->weatherDataService->getGridFromLatLon(1, 2);

        $this->assertEquals((object) $expected, (object) $actual);
    }

    /**
     * Tests when we get a request error.
     */
    public function testErrorCondition(): void
    {
        $this->httpClientMock->append(
            new RequestException("", new Request("GET", "")),
        );

        $actual = $this->weatherDataService->getGridFromLatLon(1, 2);

        $this->assertEquals(null, $actual);
    }
}
