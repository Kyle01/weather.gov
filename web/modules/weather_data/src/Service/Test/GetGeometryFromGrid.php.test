<?php

namespace Drupal\weather_data\Service;

include_once realpath(__DIR__ . "/../WeatherDataService.php");

use Drupal\Core\StringTranslation\TranslationInterface;
use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use PHPUnit\Framework\TestCase;

/**
 * Test getting geometry from the grid.
 */
final class GetGeometryFromGridTest extends TestCase {
  /**
   * The mocked HTTP client.
   *
   * @var httpClientMock
   */
  protected $httpClientMock;

  /**
   * The WeatherDataService object under test.
   *
   * @var weatherDataService
   */
  protected $weatherDataService;

  /**
   * Common setup for all component tests.
   */
  protected function setUp() : void {
    parent::setUp();

    $this->httpClientMock = new MockHandler([]);
    $stack = HandlerStack::create($this->httpClientMock);
    $client = new Client(['handler' => $stack]);

    // Just return the input string. The translation manager is tested by Drupal
    // so we don't need to.
    $translationManager = $this->createStub(TranslationInterface::class);
    $translationManager->method('translate')->will(
      $this->returnCallback(
        function ($str) {
          return $str;
        }
      )
    );

    $this->weatherDataService = new WeatherDataService($client, $translationManager);
  }

  /**
   * Tests the happy path.
   */
  public function testHappyPath(): void {
    $expected = [
      (object) ["lat" => 3, "lon" => 4],
      (object) ["lat" => 9, "lon" => 5],
      (object) ["lat" => 9, "lon" => 3],
    ];

    $this->httpClientMock->append(
      new Response(200,
        ['Content-type' => 'application/geo+json'],
        '{"geometry":{"coordinates":[[[4,3],[5,9],[3,9]]]}}'
      ),
    );

    $actual = $this->weatherDataService->getGeometryFromGrid("wfo", 1, 2);

    $this->assertEquals((object) $expected, (object) $actual);
  }

}
