<?php

namespace Drupal\weather_data\Service;

include_once "WeatherDataService.php";

use Drupal\Core\StringTranslation\TranslationInterface;
use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use PHPUnit\Framework\TestCase;

/**
 * Tests for WeatherDataService filterToFutureDays.
 *
 * This method filters regular (non-hourly, but half-day)
 * forecast periods to future days, in other words periods
 * that exclude the current day/night.
 */
final class WeatherDataServiceFilterToFutureDaysTest extends TestCase {
  /**
   * The WeatherDataService object under test.
   *
   * @var weatherDataService
   */
  protected $weatherDataService;

  /**
   * The static time used for testing.
   *
   * @var now
   */
  protected $now;

  /**
   * Test case setup.
   */
  protected function setUp(): void {
    parent::setUp();

    // Following the other testing conventions,
    // we use an established timestamp for 'now'.
    date_default_timezone_set('America/New_York');
    $this->now = \DateTimeImmutable::createFromFormat(
      \DateTimeInterface::ISO8601_EXPANDED,
      '2023-11-27T12:00:00-7:00'
    );

    // Set up the mocks. These allow us to pass
    // the correct objects to the WeatherDataService
    // constructor.
    $stack = HandlerStack::create(
      new MockHandler([])
    );
    $client = new Client(['handler' => $stack]);

    $translationManager = $this->createStub(TranslationInterface::class);

    // The WeatherDataService instance we will be testing.
    $this->weatherDataService = new WeatherDataService($client, $translationManager);
  }

  /**
   * Ensure we are removing any periods corresponding to 'today'.
   */
  public function testRemovingTodaysPeriods(): void {
    date_default_timezone_set('America/New_York');
    $tomorrow = $this->now->modify('tomorrow');
    $periods = json_decode(file_get_contents(__DIR__ . "/test_data/daily.forecast.periods.good.json"));
    $filteredPeriods = $this->weatherDataService->filterToFutureDays($periods, 5, $tomorrow);
    $this->assertEquals(10, count($filteredPeriods));

    // Ensure that all periods returned are GTE tomorrow.
    foreach ($filteredPeriods as $period) {
      $startTime = \DateTimeImmutable::createFromFormat(
        \DateTimeInterface::ISO8601_EXPANDED,
        $period->startTime
      );

      // Note: the arguments here are the opposite of what
      // you might think given the method name.
      $this->assertGreaterThanOrEqual($tomorrow, $startTime);
    }
  }

}
